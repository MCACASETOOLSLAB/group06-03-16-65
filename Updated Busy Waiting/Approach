 
 I think this solution to the Santa Claus problem is deadlock-free. The main reason I think that this solution is deadlock
 free is because of how the semaphores are used. Most of the semaphores are not actually used to gain mutual exclusion 
 over a shared resource but instead as a means to signal to another thread that something can be done. Thus, there are
 very few critical sections, where a mutex locks the critical region of memory. As a result, semaphores are left locked or
 unlocked on purpose, waiting for something to dispatch to them. Further, another goal was to have small critical regions
 that don't involve more than one mutex over a shared resource (aside from any used in external data structures). 
 That is, the program never waits on a semaphore within a critical region (except when dealing with set_t).
 
 
    Suppose that a deadlock could occur. I will take the approach of choosing waits/signals/critical sections and then
  figuring out what it would take in order for that piece of code to deadlock. Most likely the deadlock will not occur
  by the interaction of the semaphores from the elf_line_set as each semaphore can only ever be accessed by two threads:
  santa, and the specific elf owning that semaphore. These semaphores start off locked, and are only unlocked by santa 
  and then re-locked by the elves, so it won't be these semaphores that get deadlocked. The elf_counting_sem counting
  semaphore also won't be responsible for the deadlock as its behavior is very simple: count down from 3.
  
  
       Most likely, a deadlock would result from the interaction of santa_busy_mutex, santa_sleep_mutex, and elf_mutex.
  Note that the former two semaphores are only ever used sequentially, never in a nested fashion. However,within the
  elf_mutex critical section the sleep and busy mutexes are only ever signalled.
  
  
        A remaining idea is that, in terms of the way some semaphores are used not to gain mutual exclusion but to 
  signal action, the "critical sections" (although technically they aren't critical) end up spanning multiple 
  functions. Such cases are, however, too difficult to reason about.

